name: CI/CD

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: "gradle"

      - name: Build Boot JAR and detect artifact
        id: build
        shell: bash
        run: |
          set -euo pipefail
          ./gradlew clean bootJar
          echo "Artifacts in build/libs:"
          ls -al build/libs || true
          ARTIFACT=$(ls -t build/libs/*.jar | grep -v 'plain' | head -n1 || true)
          if [[ -z "${ARTIFACT:-}" || ! -f "$ARTIFACT" ]]; then
            echo "No Boot JAR found in build/libs"; exit 1
          fi
          echo "artifact=$ARTIFACT" >> "$GITHUB_OUTPUT"
      - name: Ensure Java 17 on EC2
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -euo pipefail
            if command -v java >/dev/null 2>&1; then
              echo "Java already installed:"
              java -version
              exit 0
            fi

            . /etc/os-release || true
            ID_L="${ID:-}"; VER="${VERSION_ID:-}"

            if [[ "$ID_L" == "ubuntu" || "$ID_L" == "debian" ]]; then
              sudo apt-get update -y
              sudo apt-get install -y openjdk-17-jre-headless
            elif [[ "$ID_L" == "amzn" && "$VER" == "2" ]]; then
              sudo yum install -y java-17-amazon-corretto-headless
            elif [[ "$ID_L" == "amzn" && "$VER" == "2023" ]]; then
              sudo dnf install -y java-17-amazon-corretto-headless
            elif [[ "$ID_L" =~ ^(rhel|centos|rocky|almalinux)$ ]]; then
              if [[ "$VER" == 7* ]]; then
                sudo yum install -y java-17-openjdk-headless
              else
                sudo dnf install -y java-17-openjdk-headless
              fi
            elif [[ "$ID_L" == "fedora" ]]; then
              sudo dnf install -y java-17-openjdk-headless
            else
              echo "Unsupported distro: $ID_L $VER"
              exit 1
            fi

            java -version

      - name: Prepare app dir on EC2
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            APP_ROOT="/home/${{ secrets.EC2_USER }}/app"
            mkdir -p "$APP_ROOT/build/libs"

      - name: Copy JAR to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: ${{ steps.build.outputs.artifact }}
          target: "/home/${{ secrets.EC2_USER }}/app"

      - name: Restart app on EC2
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -euo pipefail
            APP_ROOT="/home/${{ secrets.EC2_USER }}/app"
            APP_DIR="$APP_ROOT/build/libs"
            EXPECTED_NAME="$(basename "${{ steps.build.outputs.artifact }}")"

            if [[ -f "$APP_DIR/$EXPECTED_NAME" ]]; then
              APP_JAR="$APP_DIR/$EXPECTED_NAME"
            else
              APP_JAR=$(find "$APP_ROOT" -maxdepth 3 -type f \
                \( -name "$EXPECTED_NAME" -o -name "*.jar" ! -name "*-plain.jar" \) \
                | head -n1 || true)
            fi

            if [[ -z "${APP_JAR:-}" || ! -f "$APP_JAR" ]]; then
              echo "JAR not found under $APP_ROOT"
              ls -R "$APP_ROOT" || true
              exit 1
            fi

            ln -sf "$APP_JAR" "$APP_ROOT/app.jar"
            if pgrep -f "$APP_ROOT/app.jar" >/dev/null; then
              pkill -f "$APP_ROOT/app.jar"
              sleep 2
            fi
            nohup java -jar "$APP_ROOT/app.jar" --server.port=8080 > "$APP_ROOT/app.log" 2>&1 &