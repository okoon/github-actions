name: CI/CD

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: "gradle"

      - name: Build Boot JAR and detect artifact
        id: build
        shell: bash
        run: |
          set -euo pipefail
          ./gradlew clean bootJar
          echo "Artifacts in build/libs:"
          ls -al build/libs || true
          ARTIFACT=$(ls -t build/libs/*.jar | grep -v 'plain' | head -n1 || true)
          if [[ -z "${ARTIFACT:-}" || ! -f "$ARTIFACT" ]]; then
            echo "No Boot JAR found in build/libs"; exit 1
          fi
          echo "artifact=$ARTIFACT" >> "$GITHUB_OUTPUT"

      - name: Prepare app dir on EC2
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            mkdir -p "/home/${{ secrets.EC2_USER }}/app"

      - name: Copy JAR to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: ${{ steps.build.outputs.artifact }}
          target: "/home/${{ secrets.EC2_USER }}/app"

      - name: Restart app on EC2
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -euo pipefail
            APP_DIR="/home/${{ secrets.EC2_USER }}/app"
            APP_NAME=$(basename "${{ steps.build.outputs.artifact }}")
            APP_JAR="$APP_DIR/$APP_NAME"
            if [[ ! -f "$APP_JAR" ]]; then
              echo "JAR not found: $APP_JAR"
              ls -al "$APP_DIR" || true
              exit 1
            fi
            ln -sf "$APP_JAR" "$APP_DIR/app.jar"
            if pgrep -f "$APP_DIR/app.jar" >/dev/null; then
              pkill -f "$APP_DIR/app.jar"
              sleep 2
            fi
            nohup java -jar "$APP_DIR/app.jar" --server.port=8080 > "$APP_DIR/app.log" 2>&1 &
